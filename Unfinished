// 2023.5.20 v1，目标：实现wireshark可成功解析的DNS报文
#include <stdio.h>      /*for printf()*/
#include <sys/socket.h> /*for socket(), sendto() and recvfrom()*/

#include <arpa/inet.h> /*for sockaddr_in and inet_addr()*/
#include <stdlib.h>    /*for atoi() and exit()*/
#include <string.h>    /*for memset() and strlen()*/
#include <unistd.h>    /*for close()*/
#define ECHOMAX 255    /*Longest string to echo*/

int main(int argc, char *agrv) {
    // 定义UDP结构体（参考lab4）
     int sock; /*socket descriptor*/
    struct sockaddr_in serverAddress;
    unsigned short serverPort = 53; /*port number */
    char *serverIpAddress;
    int StringLen;

    /*get IP address and Data*/
    if (argc < 2)
    {
        printf("User: %s <Server IP> <data> ... <data>\n", argv[0]);
        exit(1);
    }

    /*save IP address and Data*/
    serverIpAddress = argv[1];

    /*create a datagram | UDP socket*/
    if ((sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
    {
        printf("socket() failed.\n");
        exit(1);
    }
    /*construct the server address structure*/
    memset(&serverAddress, 0, sizeof(serverAddress));
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_addr.s_addr = inet_addr(serverIpAddress);
    serverAddress.sin_port = htons(serverPort);


   
    // 定义DNS报文首部

    // 向DNS服务器发送报文请求
     
    int i = 2;
    while (argv[i] != NULL)
    {
        StringLen = strlen(argv[i]);
        if (StringLen > ECHOMAX)
        {
            printf("The message %s exit the length, we will ignore it\n", argv[i]);
            continue;
        }
        else
        {
            if ((sendto(sock, argv[i], StringLen, 0, (struct sockaddr *)&serverAddress, sizeof(serverAddress))) != StringLen)
            {
                printf("sendto() sent a different number of bytes than expected.\n");
            }
            else {
                printf("%s successfully send data to %s : %s\n", argv[0], serverIpAddress, argv[i]);
            }
        }
        i++;
    }
    close(sock);
    exit(0);

}
